plugins {
   id 'java'
   id 'eclipse'
   id 'pl.allegro.tech.build.axion-release' version '1.3.4'
   id 'maven-publish'
   id 'com.jfrog.bintray' version '1.6'
   id 'findbugs'
   id 'checkstyle'
}

scmVersion {
   tag {
      prefix = project.name
   }

   repository {
      customUsername = "$System.env.AXION_RELEASE_GITHUB_TOKEN"
      customPassword = ""
   }

   createReleaseCommit true
   releaseCommitMessage { version, position -> "Release $project.name-$version" }

   checks {
      uncommittedChanges = false
   }
}

project.group = 'com.fabahaba'
project.version = scmVersion.version

sourceCompatibility = 1.8

repositories {
   jcenter()
}

dependencies {
   //compile 'redis.clients:jedis:+'
   testCompile 'junit:junit:+'
}

sourceSets {
   test {
      java {
         srcDir 'src/unit/java'
         srcDir 'src/integ/java'
      }
      resources {
         srcDir 'src/unit/resources'
         srcDir 'src/integ/resources'
      }
   }
}

project.ext.set('redisServerPort', '9736')
project.ext.set('redisServerPass', '42')
project.ext.set('redisSSLServerPort', '6443')
project.ext.set('redisJceksTruststore', 'stunnel/stunnel.jks')

project.ext.set('clusterAnnounceIp', '127.0.0.1')
project.ext.set('startingClusterPort', '7379')
project.ext.set('numMasters', '3')
project.ext.set('numSlavesEach', '1')

test {
   outputs.upToDateWhen { false }
   testLogging {
      events "failed", "standardOut", "standardError"
      showExceptions true
      showStackTraces true
      exceptionFormat "full"
   }
   systemProperty 'jedipus.redis.port', project.redisServerPort
   systemProperty 'jedipus.redis.pass', project.redisServerPass
   systemProperty 'jedipus.redis.ssl.port', project.redisSSLServerPort
   systemProperty 'jedipus.redis.ssl.truststore.jceks', project.redisJceksTruststore

   systemProperty 'jedipus.redis.cluster.announceip', project.clusterAnnounceIp
   systemProperty 'jedipus.redis.cluster.startingport', project.startingClusterPort
   systemProperty 'jedipus.redis.cluster.nummasters', project.numMasters
   systemProperty 'jedipus.redis.cluster.numslaveseach', project.numSlavesEach
}

task startRedis(type:Exec) {
   int numMasters = project.numMasters.toInteger()
   int numClusterNodes = numMasters + numMasters *  project.numSlavesEach.toInteger()

   commandLine './scripts/startRedis.sh', project.name, project.redisServerPort, project.redisServerPass, project.startingClusterPort, numClusterNodes, project.clusterAnnounceIp, project.redisSSLServerPort
}

task rmRedis(type:Exec) {
   commandLine './scripts/rmRedis.sh', project.name
}

test.dependsOn startRedis
test.finalizedBy rmRedis

task latestRedisModule(type:Exec) {
   commandLine 'wget', '-O', 'redis/redismodule.h', 'https://raw.githubusercontent.com/antirez/redis/unstable/src/redismodule.h'
}

task compileIntegModules(type:Exec) {
   String dir = System.getProperty("user.dir");
   commandLine 'docker', 'run', '--rm', '-v', "$dir/redis/:/tmp", 'jamespedwards42/alpine-gcc-make:latest', '/bin/sh', '-c', 'cd modules && make clean && make'
}

compileIntegModules.dependsOn latestRedisModule

task sourcesJar(type: Jar, dependsOn: classes) {
   from sourceSets.main.allSource
   classifier = 'sources'
}

publishing {
   publications {
      mavenJava( MavenPublication ) {
         from components.java

         artifact sourcesJar
      }
   }
}

artifacts {
   archives sourcesJar
}

bintray {
   user = "$System.env.BINTRAY_USER"
   key = "$System.env.BINTRAY_API_KEY"

   publications = ['mavenJava']

   pkg {
      repo = 'libs'
      name = project.name
      desc = 'Redis Java 8 Client & Executor.'
      websiteUrl = 'https://github.com/jamespedwards42/jedipus'
      vcsUrl = 'https://github.com/jamespedwards42/jedipus'
      issueTrackerUrl = 'https://github.com/jamespedwards42/jedipus/issues'
      licenses = ["Apache-2.0"]
      publish = true
      version {
         name = project.version
         vcsTag = scmVersion.tag.prefix + '-' + project.version
         gpg {
            sign = true
            passphrase = "$System.env.BINTRAY_GPG_PASSPHRASE"
         }
      }
   }
}

bintrayUpload.onlyIf { !project.version.endsWith( 'SNAPSHOT' ) }

findbugs {
   toolVersion = "+"
   reportsDir = file("$project.buildDir/findbugsReports")
   effort = "max"
   reportLevel = "low"
   ignoreFailures = false
   excludeFilter = file("findbugs-exclude.xml")
}

tasks.withType(FindBugs) {
   reports {
      xml.enabled = false
      html.enabled = true
   }
}

checkstyle {
   config = resources.text.fromFile("checkstyle/google_checks.xml")
   configProperties = [samedir: "${projectDir}/checkstyle"]
   reportsDir = file("$project.buildDir/checkstyleReports")
   toolVersion = "+"
   ignoreFailures = false
}

gradle.addListener(new TestEventLogger())

class TestEventLogger implements org.gradle.api.tasks.testing.TestListener {

    public void beforeSuite(TestDescriptor suite) {
      if(suite.getClassName() != null) {
         println 'Running ' + suite.getClassName() + ' test suite.'
      }
    }

    public void afterSuite(TestDescriptor suite, TestResult result) {
    }

    public void beforeTest(TestDescriptor test) {
      println '\n' + test.getName() + ' STARTED @ ' + new Date().toTimestamp()
    }

    public void afterTest(TestDescriptor test, TestResult result) {
        println test.getName() + ' ' + result.getResultType() + ' in ' + (result.getEndTime() - result.getStartTime()) + 'ms.'
    }
}
