plugins {
   id 'jvm-component'
   id 'java-lang'
   id 'junit-test-suite'
   id 'eclipse'
   id 'pl.allegro.tech.build.axion-release' version '1.3.4'
   id 'maven-publish'
   id 'com.jfrog.bintray' version '1.6'
   id 'findbugs'
   id 'checkstyle'
}

scmVersion {
    tag {
        prefix = project.name
    }

   repository {
        customUsername = "$System.env.AXION_RELEASE_GITHUB_TOKEN"
        customPassword = ""
        pushTagsOnly = true
    }
}

project.group = 'com.fabahaba'
project.version = scmVersion.version

// Integ Testing Redis Configuration
project.ext.set('redisServerPort', '9736')
project.ext.set('clusterAnnounceIp', '127.0.0.1')
project.ext.set('startingClusterPort', '7379')
project.ext.set('numMasters', '3')
project.ext.set('numSlavesEach', '1')

model {
   components {

      main(JvmLibrarySpec) {
         sources {
            java {
               source.srcDir 'src/main/java'
            }
            resources {
               source.srcDir 'src/main/resources'
            }
         }

         targetPlatform 'java8'

         repositories {
            maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
            jcenter()
         }

         dependencies {
            module 'org.apache.commons:commons-pool2:+'
            module 'redis.clients:jedis:+'
         }

         api {
            dependencies {
               module 'org.apache.commons:commons-pool2:+'
            }
         }
      }
   }

   testSuites {
      integ(JUnitTestSuiteSpec) {
         jUnitVersion '+'
         testing $.components.main

         dependencies {
            module 'org.apache.commons:commons-pool2:+'
            module 'redis.clients:jedis:+'
            module 'org.mockito:mockito-core:+'
         }

         /*test {
            systemProperty 'jedipus.redis.port', project.redisServerPort

            systemProperty 'jedipus.redis.cluster.announceip', project.clusterAnnounceIp
            systemProperty 'jedipus.redis.cluster.startingport', project.startingClusterPort
            systemProperty 'jedipus.redis.cluster.nummasters', project.numMasters
            systemProperty 'jedipus.redis.cluster.numslaveseach', project.numSlavesEach
         }*/

         task startRedis(type:Exec) {

            int numMasters = project.numMasters.toInteger()
            int numClusterNodes = numMasters + numMasters *  project.numSlavesEach.toInteger()

            commandLine './scripts/startRedis.sh', project.name, project.redisServerPort, project.startingClusterPort, numClusterNodes, project.clusterAnnounceIp
         }

         task rmRedis(type:Exec) {

            commandLine './scripts/rmRedis.sh', project.name
         }

         //test.dependsOn startRedis
         //test.finalizedBy rmRedis
      }
   }
}

publishing {
   publications {
      mavenJava( MavenPublication ) {
      }
   }
}

findbugs {
   toolVersion = "+"
   reportsDir = file("$project.buildDir/findbugsReports")
   effort = "max"
   reportLevel = "low"
   ignoreFailures = false
   excludeFilter = file("findbugs-exclude.xml")
}

tasks.withType(FindBugs) {
   reports {
        xml.enabled = false
        html.enabled = true
   }
}

bintray {
    user = "$System.env.BINTRAY_USER"
    key = "$System.env.BINTRAY_API_KEY"

    publications = ['mavenJava']

    pkg {
        repo = 'libs'
        name = project.name
        desc = 'Kills the cluster client and marries the command logic of Jedis.'
        websiteUrl = 'https://github.com/jamespedwards42/jedipus'
        vcsUrl = 'https://github.com/jamespedwards42/jedipus'
        issueTrackerUrl = 'https://github.com/jamespedwards42/jedipus/issues'
        licenses = ["Apache-2.0"]
        publish = true
        version {
            name = project.version
            vcsTag = scmVersion.tag.prefix + '-' + project.version
            gpg {
                sign = true
                passphrase = "$System.env.BINTRAY_GPG_PASSPHRASE"
            }
        }
    }
}

bintrayUpload.onlyIf { !project.version.endsWith( 'SNAPSHOT' ) }

checkstyle {
   config = resources.text.fromFile("checkstyle/google_checks.xml")
   configProperties = [samedir: "${projectDir}/checkstyle"]
   reportsDir = file("$project.buildDir/checkstyleReports")
   toolVersion = "+"
   ignoreFailures = false
}
